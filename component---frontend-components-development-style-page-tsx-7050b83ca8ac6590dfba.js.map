{"version":3,"sources":["webpack:///./frontend/components/development/style-page.tsx"],"names":["StyledTable","styled","table","Badges","baseUrl","style","badges","map","label","message","labelColor","color","namedLogo","links","key","alt","object","Boolean","src","staticBadgeUrl","examples","title","StyleTable","styles","StylePage"],"mappings":"6FAAA,gJAUMA,EAAcC,IAAOC,MAAV,8EAAGD,CAAH,2GAoBjB,SAASE,EAAT,GAQgB,IAPdC,EAOc,EAPdA,QACAC,EAMc,EANdA,MACAC,EAKc,EALdA,OAMA,OACE,oCACGA,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,MAAOC,EAAtC,EAAsCA,UAAWC,EAAjD,EAAiDA,MAAjD,OACV,kBAAC,WAAD,CAAUC,IAAQN,EAAL,IAAcC,EAAd,IAAyBE,EAAzB,IAAkCC,GAC7C,kBAAC,IAAD,CACEG,IAAI,QACJC,OAAQC,QAAQJ,GAChBK,IAAKC,yBAAe,CAClBf,UACAI,QACAC,UACAC,aACAC,QACAC,YACAP,QACAQ,YAGJ,kCAYV,IAAMO,EAAW,CACf,CACEC,MAAO,iBACPf,OAAQ,CACN,CAAEE,MAAO,QAASC,QAAS,UAAWE,MAAO,eAC7C,CAAEH,MAAO,QAASC,QAAS,sBAAuBE,MAAO,OACzD,CAAEH,MAAO,SAAUC,QAAS,kBAAmBE,MAAO,UAG1D,CACEU,MAAO,OACPf,OAAQ,CACN,CACEE,MAAO,QACPC,QAAS,UACTE,MAAO,cACPC,UAAW,cAIjB,CACES,MAAO,eACPf,OAAQ,CACN,CAAEE,MAAO,GAAIC,QAAS,aAAcE,MAAO,cAC3C,CACEH,MAAO,GACPC,QAAS,UACTE,MAAO,cACPC,UAAW,YAEb,CACEJ,MAAO,GACPC,QAAS,UACTE,MAAO,cACPD,WAAY,OACZE,UAAW,cAIjB,CACES,MAAO,QACPf,OAAQ,CACN,CACEE,MAAO,SACPC,QAAS,UACTE,MAAO,OACPE,MAAO,CACL,6BACA,0CAOV,SAASS,EAAT,GAA+D,IAAzCjB,EAAyC,EAAzCA,MACpB,OACE,kBAACL,EAAD,KACE,+BACE,4BACE,2CACA,4CACA,8CAGJ,+BACGoB,EAASb,KAAI,gBAAGc,EAAH,EAAGA,MAAOf,EAAV,EAAUA,OAAV,OACZ,wBAAIQ,IAAKO,GACP,4BAAKA,GACL,4BACE,kBAAClB,EAAD,CAAQG,OAAQA,EAAQF,QAASA,IAASC,MAAOA,KAEnD,4BACE,kBAACF,EAAD,CACEG,OAAQA,EACRF,QAAQ,wBACRC,MAAOA,WAUvB,IAAMkB,EAAS,CAAC,OAAQ,cAAe,gBAAiB,SAAU,WAEnD,SAASC,IACtB,OACE,6BACE,kBAAC,IAAD,MACA,kBAAC,IAAD,MACCD,EAAOhB,KAAI,SAAAF,GAAK,OACf,kBAAC,WAAD,CAAUS,IAAKT,GACb,kBAAC,IAAD,KAAKA,GACL,kBAACiB,EAAD,CAAYjB,MAAOA","file":"component---frontend-components-development-style-page-tsx-7050b83ca8ac6590dfba.js","sourcesContent":["import React, { Fragment } from 'react'\nimport styled from 'styled-components'\n// @ts-ingnore\nimport { staticBadgeUrl } from '../../../core/badge-urls/make-badge-url'\nimport { baseUrl } from '../../constants'\nimport Meta from '../meta'\n// @ts-ignore\nimport Header from '../header'\nimport { H3, Badge } from '../common'\n\nconst StyledTable = styled.table`\n  border: 1px solid #ccc;\n  border-collapse: collapse;\n\n  td {\n    border: 1px solid #ccc;\n    padding: 3px;\n    text-align: left;\n  }\n`\n\ninterface BadgeData {\n  label: string\n  message: string\n  labelColor?: string\n  color: string\n  namedLogo?: string\n  links?: string[]\n}\n\nfunction Badges({\n  baseUrl,\n  style,\n  badges,\n}: {\n  baseUrl: string\n  style: string\n  badges: BadgeData[]\n}): JSX.Element {\n  return (\n    <>\n      {badges.map(({ label, message, labelColor, color, namedLogo, links }) => (\n        <Fragment key={`${label}-${message}-${color}-${namedLogo}`}>\n          <Badge\n            alt=\"build\"\n            object={Boolean(links)}\n            src={staticBadgeUrl({\n              baseUrl,\n              label,\n              message,\n              labelColor,\n              color,\n              namedLogo,\n              style,\n              links,\n            })}\n          />\n          <br />\n        </Fragment>\n      ))}\n    </>\n  )\n}\n\ninterface StyleExamples {\n  title: string\n  badges: BadgeData[]\n}\n\nconst examples = [\n  {\n    title: 'Basic examples',\n    badges: [\n      { label: 'build', message: 'passing', color: 'brightgreen' },\n      { label: 'tests', message: '5 passing, 1 failed', color: 'red' },\n      { label: 'python', message: '3.5 | 3.6 | 3.7', color: 'blue' },\n    ],\n  },\n  {\n    title: 'Logo',\n    badges: [\n      {\n        label: 'build',\n        message: 'passing',\n        color: 'brightgreen',\n        namedLogo: 'appveyor',\n      },\n    ],\n  },\n  {\n    title: 'No left text',\n    badges: [\n      { label: '', message: 'blueviolet', color: 'blueviolet' },\n      {\n        label: '',\n        message: 'passing',\n        color: 'brightgreen',\n        namedLogo: 'appveyor',\n      },\n      {\n        label: '',\n        message: 'passing',\n        color: 'brightgreen',\n        labelColor: 'grey',\n        namedLogo: 'appveyor',\n      },\n    ],\n  },\n  {\n    title: 'Links',\n    badges: [\n      {\n        label: 'badges',\n        message: 'shields',\n        color: 'blue',\n        links: [\n          'https://github.com/badges/',\n          'https://github.com/badges/shields/',\n        ],\n      },\n    ],\n  },\n]\n\nfunction StyleTable({ style }: { style: string }): JSX.Element {\n  return (\n    <StyledTable>\n      <thead>\n        <tr>\n          <td>Description</td>\n          <td>Badges (new)</td>\n          <td>Badges (old)</td>\n        </tr>\n      </thead>\n      <tbody>\n        {examples.map(({ title, badges }) => (\n          <tr key={title}>\n            <td>{title}</td>\n            <td>\n              <Badges badges={badges} baseUrl={baseUrl} style={style} />\n            </td>\n            <td>\n              <Badges\n                badges={badges}\n                baseUrl=\"http://img.shields.io\"\n                style={style}\n              />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </StyledTable>\n  )\n}\n\nconst styles = ['flat', 'flat-square', 'for-the-badge', 'social', 'plastic']\n\nexport default function StylePage(): JSX.Element {\n  return (\n    <div>\n      <Meta />\n      <Header />\n      {styles.map(style => (\n        <Fragment key={style}>\n          <H3>{style}</H3>\n          <StyleTable style={style} />\n        </Fragment>\n      ))}\n    </div>\n  )\n}\n"],"sourceRoot":""}